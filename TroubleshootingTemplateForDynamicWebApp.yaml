AWSTemplateFormatVersion: 2010-09-09 
Description:   
  This template creates vpc, nat gateway, securitygroups, and rds.

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
#VPC Label
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - PrivateSubnet3CIDR
          - PrivateSubnet4CIDR
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation

# #RDS Label      
#       - 
#         Label: 
#           default: "Databae Parameters"
#         Parameters:
#           - DatabaseInstanceIdentifier
#           - DatabaseName
#           - DatabaseUser
#           - DatabasePassword
#           - DatabaseBackupRetentionPeriod
#           - DatabaseAllocatedStorage
#           - DatabaseInstanceClass
#           - MultiAZDatabase

Parameters:
#VPC Parameters
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private webserver subnet in the first Availability Zone
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private webserver subnet in the second Availability Zone
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private database subnet in the first Availability Zone
    Type: String
    Default: 10.0.4.0/24

  PrivateSubnet4CIDR:
    Description: Please enter the IP range (CIDR notation) for the private database subnet in the second Availability Zone
    Type: String
    Default: 10.0.5.0/24
    
  SSHLocation:
    Description: ' The IP address range that can be used to access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 72.133.248.91/32
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

# #RDS Parameters
#   DatabaseInstanceIdentifier:
#     Description: RDS instance identifier
#     Default: dev-rds-db
#     Type: String

#   DatabaseName:
#     Description: MySQL database name
#     Default: applicationdb
#     Type: String
#     MinLength: '1'
#     MaxLength: '64'
#     AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
#     ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

#   DatabaseUser:
#     Description: Username for MySQL database access
#     Default: craaappuser
#     NoEcho: 'true'
#     Type: String
#     MinLength: '1'
#     MaxLength: '16'
#     AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
#     ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

#   DatabasePassword:
#     Description: Password for MySQL database access
#     Default: craaappuser123
#     NoEcho: 'true'
#     Type: String
#     MinLength: '8'
#     MaxLength: '41'
#     AllowedPattern: '[a-zA-Z0-9]*'
#     ConstraintDescription: must contain only alphanumeric characters.

#   DatabaseBackupRetentionPeriod:
#     ConstraintDescription: Database backup retention period must be between 1 and 35 days
#     Default: '0'
#     Description: The number of days for which automatic DB snapshots are retained
#     MaxValue: '8'
#     MinValue: '0'
#     Type: Number

#   DatabaseAllocatedStorage:
#     Description: The size of the database (Gb)
#     Default: '5'
#     Type: Number
#     MinValue: '5'
#     MaxValue: '1024'
#     ConstraintDescription: must be between 5 and 1024Gb.

#   DatabaseInstanceClass:
#     Description: The database instance type
#     Type: String
#     Default: db.t2.micro
#     AllowedValues:
#       - db.t1.micro
#       - db.m1.small
#       - db.m1.medium
#       - db.m1.large
#       - db.m1.xlarge
#       - db.m2.xlarge
#       - db.m2.2xlarge
#       - db.m2.4xlarge
#       - db.m3.medium
#       - db.m3.large
#       - db.m3.xlarge
#       - db.m3.2xlarge
#       - db.m4.large
#       - db.m4.xlarge
#       - db.m4.2xlarge
#       - db.m4.4xlarge
#       - db.m4.10xlarge
#       - db.r3.large
#       - db.r3.xlarge
#       - db.r3.2xlarge
#       - db.r3.4xlarge
#       - db.r3.8xlarge
#       - db.m2.xlarge
#       - db.m2.2xlarge
#       - db.m2.4xlarge
#       - db.cr1.8xlarge
#       - db.t2.micro
#       - db.t2.small
#       - db.t2.medium
#       - db.t2.large
#     ConstraintDescription: must select a valid database instance type.

#   MultiAZDatabase:
#     Description: Create a Multi-AZ MySQL Amazon RDS database instance
#     Default: 'false'
#     Type: String
#     AllowedValues:
#       - 'true'
#       - 'false'
#     ConstraintDescription: must be either true or false.

# Conditions:
#   CreateReadReplica: !Equals 
#     - !Ref MultiAZDatabase
#     - 'true'

Resources:
# VPC Resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Dev VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Dev Internet Gateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet AZ1

  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet AZ2

  PrivateAppSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private App Subnet AZ1

  PrivateAppSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private App Subnet AZ2

  PrivateDataSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Data Subnet AZ1

  PrivateDataSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Data Subnet AZ2

#NAT Gateway Resources
  NatGatewayAZ1EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: VPC
      
  NatGatewayAZ1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayAZ1EIP.AllocationId
      SubnetId: !Ref PublicSubnetAZ1
      Tags:
        - Key: Name
          Value: NatGateway Public Subnet AZ1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ1

  PublicSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetAZ2

  PrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private Route Table AZ1
          
  PrivateRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZ1

  PrivateAppSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      SubnetId: !Ref PrivateAppSubnetAZ1

  PrivateDataSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      SubnetId: !Ref PrivateDataSubnetAZ1

  PrivateAppSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      SubnetId: !Ref PrivateAppSubnetAZ2

  PrivateDataSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      SubnetId: !Ref PrivateDataSubnetAZ2

#EC2 Instance Connect Endpoint Resources
  EC2InstanceConnectEndpoint:
    Type: AWS::EC2::InstanceConnectEndpoint
    Properties:
      SecurityGroupIds: 
        - !Ref EICESecurityGroup
      SubnetId: !Ref PrivateAppSubnetAZ1
      Tags:
        - Key: Name
          Value: EC2 Instance Connect Endpoint

#Security Groups Resources
  EICESecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EICE Security Group
      GroupName: EICE Security Group
      SecurityGroupEgress:
        - CidrIp: !Ref VpcCIDR
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EICE Security Group

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      GroupName: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: SSH Security Group

  # DataBaseSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Database Security Group
  #     GroupName: Database Security Group
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '3306'
  #         ToPort: '3306'
  #         SourceSecurityGroupId: !Ref WebServerSecurityGroup
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: Database Security Group

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ALB Security Group
      GroupName: ALB Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ALB Security Group

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Webserver Security Group
      GroupName: Webserver Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref EICESecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Webserver Security Group
 
# #RDS Resources
#   DatabaseSubnetGroup:
#     Type: 'AWS::RDS::DBSubnetGroup'
#     Properties:
#       DBSubnetGroupDescription: Subnet Group for RDS Database
#       DBSubnetGroupName: database subnets
#       SubnetIds: 
#         - !Ref PrivateDataSubnetAZ1
#         - !Ref PrivateDataSubnetAZ2
#       Tags:
#         - Key: Name
#           Value: database subnets

#   DatabaseInstance:
#     Type: 'AWS::RDS::DBInstance'
#     Properties:
#       DBInstanceIdentifier: !Ref DatabaseInstanceIdentifier
#       AvailabilityZone: !Select [ 0, !GetAZs  '' ]
#       BackupRetentionPeriod: !Ref DatabaseBackupRetentionPeriod
#       Engine: MySQL
#       EngineVersion: 8.0.34
#       DBName: !Ref DatabaseName
#       MultiAZ: !Ref MultiAZDatabase
#       MasterUsername: !Ref DatabaseUser
#       MasterUserPassword: !Ref DatabasePassword
#       DBInstanceClass: !Ref DatabaseInstanceClass
#       DBSubnetGroupName: !Ref DatabaseSubnetGroup
#       AllocatedStorage: !Ref DatabaseAllocatedStorage
#       VPCSecurityGroups:
#         - !GetAtt 
#           - DataBaseSecurityGroup
#           - GroupId
